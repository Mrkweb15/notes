namespace plane_defender
{
    public partial class Form1 : Form
    {
        Random rnd = new Random();
        int score = 0;
        int hp = 10;

        //myPlane
        bool up, down, shooting = false;
        int BulletSpeed = 20;

        //enemy
        int enemySpeed = 5;
        bool enemy1MovingUp = true;
        bool enemy2MovingUp = false;
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            bullet.Hide();
            explosion.Hide();
            txtGameOver.Hide();
            txtEndScore.Hide();
            txtGameOver.Left = (ClientSize.Width - txtGameOver.Width) / 2;
            txtEndScore.Left = (ClientSize.Width - txtEndScore.Width) / 2;
        }

        private void keyIDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                up = true;
            }
            if (e.KeyCode == Keys.Down)
            {
                down = true;
            }
            if (e.KeyCode == Keys.Space)
            {
                shooting = true;
            }
        }

        private void keyIsUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                up = false;
            }
            if (e.KeyCode == Keys.Down)
            {
                down = false;
            }
            if (e.KeyCode == Keys.Space)
            {
                shooting = false;
            }


            if (!timer1.Enabled && e.KeyCode == Keys.Space)
            {
                timer1.Enabled = true;
                myPlane.Top = (myPlane.Height / 2) + (ClientSize.Height / 2);
                score = 0;
                hp = 10;
                txtGameOver.Hide();
                txtEndScore.Hide();
                explosion.Hide();
            }
        }


        private void timer1_Tick(object sender, EventArgs e)
        {

            if (up)
            {
                myPlane.Top -= 10;
            }
            if (down)
            {
                myPlane.Top += 10;
            }

            //shooting
            if (shooting)
            {
                bullet.Left += enemySpeed;
                bullet.Top = myPlane.Top + (myPlane.Height / 2) - (bullet.Height / 2);
                bullet.Left = myPlane.Left + myPlane.Width;
                bullet.Show();
                bullet.Left += enemySpeed;
            }

            bullet.Left += BulletSpeed;

            if (bullet.Left > ClientSize.Width)
            {
                bullet.Hide();
                shooting = false;
            }

            if(bullet.Bounds.IntersectsWith(enemy1.Bounds))
            {
                score++;
                explosion.Left = enemy1.Left;
                explosion.Top = enemy1.Top;
                explosion.Show();
                shooting = false;
                bullet.Hide();
                bullet.Left = 0;
                enemy1.Left = ClientSize.Width;

            }

            if (bullet.Bounds.IntersectsWith(enemy2.Bounds))
            {
                score++;
                explosion.Left = enemy2.Left;
                explosion.Top = enemy2.Top;
                explosion.Show();
                shooting = false;
                bullet.Hide();
                enemy2.Left = ClientSize.Width;
            }
            txtScore.Text = "Score: " + Convert.ToString(score);
            txtEndScore.Text = "Score: " + Convert.ToString(score);

            // Move enemy1 vertically
            if (enemy1MovingUp)
            {
                enemy1.Top -= enemySpeed;
            }
            if (!enemy1MovingUp)
            {
                enemy1.Top += enemySpeed;
            }
            if (enemy1.Top <= 0)
            {
                enemy1MovingUp = false;
            }
            if (enemy1.Top + enemy1.Height >= ClientSize.Height || enemy1.Bounds.IntersectsWith(land.Bounds))
            {
                enemy1MovingUp = true;
            }

            enemy1.Left -= enemySpeed;
            if (enemy1.Left + enemy1.Width < 0)
            {
                hp--;
                enemy1.Left = ClientSize.Width + new Random().Next(50, 200);
            }

            // Move enemy2
            if (enemy2MovingUp)
            {
                enemy2.Top -= enemySpeed;
            }
            if (!enemy2MovingUp)
            {
                enemy2.Top += enemySpeed;
            }
            if (enemy2.Top <= 0)
            {
                enemy2MovingUp = false;
            }
            if (enemy2.Top + enemy2.Height >= ClientSize.Height || enemy2.Bounds.IntersectsWith(land.Bounds))
            {
                enemy2MovingUp = true;
            }

            enemy2.Left -= enemySpeed;
            if (enemy2.Left + enemy2.Width < 0)
            {
                hp--;
                enemy2.Left = ClientSize.Width + new Random().Next(50, 200);
            }


            if (myPlane.Top < 0)
            {
                myPlane.Top = 0;
            }

            //Game rule
            if (myPlane.Bounds.IntersectsWith(enemy1.Bounds))
            {
                explosion.Left = enemy1.Left;
                explosion.Top = enemy1.Top;
                explosion.Show();
                hp -= 5;
                enemy1.Left = ClientSize.Width + new Random().Next(50, 200);
            }
            if (myPlane.Bounds.IntersectsWith(enemy2.Bounds))
            {
                explosion.Left = enemy2.Left;
                explosion.Top = enemy2.Top;
                explosion.Show();
                hp -= 5;
                enemy2.Left = ClientSize.Width + new Random().Next(50, 200);
            }
            if (myPlane.Bounds.IntersectsWith(land.Bounds) || hp == 0)
            {
                txtGameOver.Show();
                txtEndScore.Show();
                explosion.Left = (explosion.Width + myPlane.Left) / 2;
                explosion.Top = myPlane.Top - (myPlane.Height / 2);
                explosion.Show();
                timer1.Stop();
            }

            txtHP.Text = "HP: " + Convert.ToString(hp) + "/10";
        }
    }
}
